#!/bin/bash

# echo dont use this yet
# exit 1

DOTSDIR="$HOME/dots"
MODULEDIR=$DOTSDIR/modules
FONTSDIR=$DOTSDIR/fonts
PACKSDIR=$DOTSDIR/packs
CONFIG=".config"

BACKUPMOUNT="/backup"
BACKUPDIR="$BACKUPMOUNT"

sw_banner() {
  echo "       __/)                          "
  echo "    .-(__(=:                         "
  echo " |\ |    \)     /   _/_ /)   //      "
  echo " \ ||        __/ __ /  // o // _  _  "
  echo "  \||       (_/_(_)<__//_<_</_</_/_)_"
  echo "   \|                />              "
  echo "    |  codie;dots O </  with ✧˚ ♡ · ."
}

sw_text(){
  # TODO: add --no-extra to disable "codie;dots O" text
  if ! which figlet > /dev/null; then
    echo figet not found
    echo install with: \`pacman -S figlet\`
    exit 2
  fi
  # TODO: make other stuff maybe
  printf "codie;dots O"
  figlet -f mini $@ | tr '|' '/' | tr ')' '/' | tr '(' '\' 2> /dev/null
}

sw_linkbin() {
  echo "Linking bin..."
  sudo stow -d $HOME/dots -t /usr/local/bin --no-folding bin
}

sw_xmm() {
  echo "xmodmap $XDG_CONFIG_HOME/X11/xmodmap..."
  xmodmap $XDG_CONFIG_HOME/X11/xmodmap
}


md_help() {
  echo
  sw_banner
  echo
  echo "A linker for codie;dots O's configs"
  echo 
  echo "COMMANDS"
  echo
  echo "  help                    Print help and exit"
  echo "  ls                      List modules"
  echo "  tree                    Show modules in tree format"
  echo "  link [all|NAME]         Symlink modules to \$CONFIG"
  echo "  new [NAME]              Create a new folder in"
  echo "                          modules path"
  echo "  edit [NAME]             Edit a config file"
}

md_link() {
  mkdir $HOME/$CONFIG
  mod=`echo $1 | tr '[:upper:]' '[:lower:]'`
  if [[ "$mod" == "all" ]]; then
    echo "linking modules folder to '~/$CONFIG'"
    stow -d $DOTSDIR -t $HOME/$CONFIG --no-folding modules --dotfiles
  else
    echo TODO: linking module $mod...
    exit 1
    # stow -d $HOME/dots -t $HOME/$CONFIG --no-folding $1 --dotfiles
  fi
}

md_edit() {

  MODEDIT=`tulip m ls`

  if [[ -z "$1" ]]; then
    echo $MODEDIT | tr ' ' '\n' | fzf
  else
    # list contains
    echo $1
  fi

}

pk_help() {
  echo
  sw_banner
  echo
  echo "A downloader for codie;dots O's packs"
  echo 
  echo "COMMANDS"
  echo
  echo "  help                    Print pack help and exit"
  echo "  ls                      List packs"
  echo "  install [all|NAME...]   Install selected packs"
  echo
  exit
}

pk_install() {
  pack=`echo $1 | tr '[:upper:]' '[:lower:]'`
  if [[ "$pack" == "all" ]]; then
    echo "TODO: installing all packs"
  else
    echo "installing $pack.pck"
    sudo pacman -Sy --noconfirm $(cat $PACKSDIR/$pack.pck)
  fi
}

ft_help() {
  echo
  sw_banner
  echo
  echo "A setter for codie;dots O's fonts"
  echo 
  echo "COMMANDS"
  echo
  echo "  help                    Print font help and exit"
  echo "  ls                      List fonts"
  echo "  apply [all|NAME]        Apply fonts"
  echo "  del [all|NAME]          Deapply fonts [TODO]"
  echo
  exit
}

ft_apply() {
  sudo cp $FONTSDIR/$1 /usr/share/fonts/ -r
  # TODO: check if -f switch needed
  fc-cache -f
}

ft_deapply() {
  echo "deleting /usr/share/fonts/$1"
  sudo rm /usr/share/fonts/$1 -r
  # TODO: check if -f switch needed
  fc-cache -f
}

tg_help() {
  echo
  sw_banner
  echo
  # TODO: add --exit/-e to get commands for exitcodes
  echo "A toggler for codie;dots O"
  echo 
  echo "COMMANDS"
  echo
  echo "  vpn [on|off|toggle|get --exit|-e] "
  echo "      [--polybar %pid%]   toggle vpn connection"
  echo "  nl [on|off|toggle|get --exit|-e] "
  echo "     [--polybar %pid%]    toggle nightlight"
  echo "  dnd [on|off|toggle|get --exit|-e] "
  echo "      [--polybar %pid%]   toggle dnd mode"
  echo "  gm [list|get --exit|-e] "
  echo "     [--polybar %pid%]    get gm status"
  echo
  echo " TODO: implement --exit|-e for exitcodes"
  echo " NOTE: return of 'get' is inconsistent"
  echo
  exit
}

tg_vpn() {
  # TODO: automate this maybe
  # TODO: integration with vpnadd??
  VPNNAME="nl-free-2.protonvpn.udp"

  case "$1" in
    "on"     ) nmcli c up $VPNNAME ;;
    "off"    ) nmcli c down $VPNNAME ;;
    "get"    ) nmcli -f GENERAL.STATE c show $VPNNAME | awk '{print $2}' ;;
    *        ) 
      if [ `nmcli -f GENERAL.STATE c show $VPNNAME | awk '{print $2}'` == "activated" ]; then
        nmcli c down $VPNNAME
      else
        nmcli c up $VPNNAME
      fi ;;
  esac 

  if [[ "$2" == "--polybar" ]]; then
    if [ -z "$3" ]; then
      echo "No pid provided for --polybar"
      exit 2
    fi

    if [[ `nmcli -f GENERAL.STATE c show $VPNNAME | awk '{print $2}'` == "activated" ]]; then
      polybar-msg -p $3 action vpn hook 0 > /dev/null
    else
      polybar-msg -p $3 action vpn hook 1 > /dev/null
    fi

  fi

}

tg_nlight() {
  [ ! -f "/tmp/redshift" ]
  nlstat="$?"

  # TODO: add vars for K values
  # TODO: add a conviniance function/wraper for redshift

  case "$1" in
    "on"     ) redshift -P -O 4500K > /dev/null
               touch /tmp/redshift ;;
    "off"    ) redshift -P -O 6500K > /dev/null
               rm /tmp/redshift ;;
    "get"    ) echo $nlstat ;;
    *        ) 
               if [ -f "/tmp/redshift" ]; then
                 echo disabled redshift
                 redshift -P -O 6500K > /dev/null
                 rm /tmp/redshift
               else
                 echo enabled redshift
                 redshift -P -O 4500K > /dev/null
                 touch /tmp/redshift
               fi ;;
  esac 

  if [[ "$2" == "--polybar" ]]; then
    if [ -z "$3" ]; then
      echo "No pid provided for --polybar"
      exit 2
    fi

  if [ -f "/tmp/redshift" ]; then
      polybar-msg -p $3 action nightlight hook 0 > /dev/null
    else
      polybar-msg -p $3 action nightlight hook 1 > /dev/null
    fi

  fi

}

tg_dnd() {
  case "$1" in
    "on"     ) dunstctl set-paused true ;;
    "off"    ) dunstctl set-paused false ;;
    "get"    ) dunstctl is-paused ;;
    *        ) dunstctl set-paused toggle ;;
  esac 

  if [[ "$2" == "--polybar" ]]; then
    if [ -z "$3" ]; then
      echo "No pid provided for --polybar"
      exit 2
    fi

    if [ "$(dunstctl is-paused)" = "true" ]; then
      polybar-msg -p $3 action dnd hook 0 > /dev/null
    else
      polybar-msg -p $3 action dnd hook 1 > /dev/null
    fi
  fi
}

tg_gm() {
  case "$1" in
    "list"   ) gamemodelist ;;
    *        ) gamemodelist | grep PID; echo $? ;;
  esac 

  if [[ "$2" == "--polybar" ]]; then
    if [ -z "$3" ]; then
      echo "No pid provided for --polybar"
      exit 2
    fi

    if gamemodelist | grep PID; then
      polybar-msg -p $3 action gamemode hook 0 > /dev/null
    else
      polybar-msg -p $3 action gamemode hook 1 > /dev/null
    fi
  fi
}

bk_help() {
  echo
  sw_banner
  echo
  # TODO: add --exit/-e to get commands for exitcodes
  echo "Backup manager for codie;dots O"
  echo 
  echo "COMMANDS"
  echo
  echo "  take [OPTIONS]          Take a quick backup"
  echo "  list                    List the backups"
  echo "  load [DATE]             Load the backup [DATE]"
  echo "                          to \$TULIP_BACKUP_HOME or"
  echo "                         \$HOME if not set"
  echo "  loadtmp [DATE]          Load backup [DATE] to /tmp"
  echo
  echo " Note: all backup actions use $BACKUPMOUNT"
  echo " for storing backups  "
  exit
}

bk_take() {
  sudo mkdir $BACKUPDIR/$(date +"%Y-%m-%d")

  echo :: archiving project folders...

  tar -cf project$(date +"%Y-%m-%d").tar ~/personal ~/playground ~/work
  sudo mv project$(date +"%Y-%m-%d").tar $BACKUPDIR/$(date +"%Y-%m-%d")

  echo :: archiving dots...

  tar -cf dots$(date +"%Y-%m-%d").tar $DOTSDIR
  sudo mv dots$(date +"%Y-%m-%d").tar $BACKUPDIR/$(date +"%Y-%m-%d")

  echo :: archiving misc...

  tar -cf misc$(date +"%Y-%m-%d").tar ~/misc
  sudo mv misc$(date +"%Y-%m-%d").tar $BACKUPDIR/$(date +"%Y-%m-%d")

}

bk_load() {
  if [[ -z $TULIP_BACKUP_HOME ]] then
    TULIP_BACKUP_HOME=$HOME
  fi

  DATE=$1

  printf "loading backup $DATE to $TULIP_BACKUP_HOME [Y/n] "
  read input

  if yesno ${input}Y -i; then
    echo esit
    exit
  fi

  find $BACKUPDIR/$DATE -name '*.tar' -exec tar xf {} --directory=$TULIP_BACKUP_HOME \;
}

sw_help() {
  echo
  sw_banner
  echo
  echo "Central util for codie;dots O"
  echo
  echo "COMMANDS"
  echo
  echo "  help                    Print help and exit"
  echo "  linkbin                 Symlink dots/bin to /usr/local/bin"
  echo "  banner                  Print banner"
  echo "  text [STRING]           Converts STRING into"
  echo "                          header for config files"
  echo "  xxm                     sources .xmodmap file"
  echo
  echo "SHORTCUTS"
  echo
  echo "  module                  Shortcut to codie;dots O"
  echo "                          config linking util"
  echo "  font                    Shortcut to codie;dots O"
  echo "                          font util"
  echo "  pack                    Shortcut to codie;dots O"
  echo "                          pack installer"
  echo "  toggle                  Shortcut to codie;dots O"
  echo "                          toggler"
  echo "  backup                  Shortcut to codie;dots O"
  echo "                          backup utility"
  # echo "  mp3                     Shortcut to codie;dots O"
  # echo "                          mp3 liberary util"
  exit
}

sw_modu() {
  case "$1" in
    "ls"      ) ls $MODULEDIR ${@:2} ;;
    "tree"    ) tree $MODULEDIR ${@:2} ;;
    "link"    ) md_link $2 ;;
    # TODO: fix this now working for other users / idk if i need to tho
    "new"     ) mkdir $MODULEDIR/$2 ;;
    "edit"    ) md_edit ${@:2} ;;

    *         ) md_help ;;
  esac
}

sw_font() {
  case "$1" in
    "ls"      ) ls $FONTSDIR ${@:2};;
    "apply"   ) ft_apply $2 ;;
    "del"     ) ft_deapply $2 ;;
    "deapply" ) ft_deapply $2 ;;

    *         ) ft_help ;;
  esac
}

sw_pack() {
  case "$1" in
    "ls"      ) ls $PACKSDIR ${@:2} ;;
    "install" ) pk_install $2 ;;

    *         ) pk_help ;;
  esac
}

sw_togl() {
  case "$1" in
    "vpn"        ) tg_vpn ${@:2} ;;
    "nl"         ) tg_nlight ${@:2} ;;
    "nightlight" ) tg_nlight ${@:2} ;;
    "dnd"        ) tg_dnd ${@:2} ;;
    "gamemode"   ) tg_gm ${@:2} ;;
    "gm"         ) tg_gm ${@:2} ;;

    *            ) tg_help ;;
  esac
}

sw_back() {
  case "$1" in
    "take"       ) bk_take ${@:2} ;;
    "list"       ) ls $BACKUPDIR ;;
    "load"       ) bk_load ${@:2} ;;
    "loadtmp"    ) TULIP_BACKUP_HOME=/tmp bk_load ${@:2} ;;

    *            ) bk_help ;;
  esac
}

case "$1" in
  "banner" ) sw_banner      ;;
  "text"   ) sw_text ${@:2} ;;
  "linkbin") sw_linkbin     ;;
  "lb"     ) sw_linkbin     ;;
  "xmm"    ) sw_xmm         ;;

  "m"      ) sw_modu ${@:2} ;;
  "mod"    ) sw_modu ${@:2} ;;
  "modu"   ) sw_modu ${@:2} ;;
  "module" ) sw_modu ${@:2} ;;

  "f"      ) sw_font ${@:2} ;;
  "font"   ) sw_font ${@:2} ;;

  "p"      ) sw_pack ${@:2} ;;
  "pack"   ) sw_pack ${@:2} ;;

  "t"      ) sw_togl ${@:2} ;;
  "tog"    ) sw_togl ${@:2} ;;
  "togl"   ) sw_togl ${@:2} ;;
  "toggle" ) sw_togl ${@:2} ;;

  "b"      ) sw_back ${@:2} ;;
  "back"   ) sw_back ${@:2} ;;
  "backup" ) sw_back ${@:2} ;;

  *        ) sw_help        ;;
esac
